// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  CLIENT
  EMPLOYEE
  ADMIN
}

enum ProductBrand {
  NIKE
  ADIDAS
  NEW_BALANCE
}

enum ProductStatus {
  AVAILABLE
  LOW_STOCK
  NO_STOCK
}

enum OrderStatus {
  PROCESSING
  COMPLETED
  CANCELED
}

enum EmployeeStatus {
  ACTIVE
  VACATION
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model User {
  id    String  @id @default(uuid())
  email String  @unique
  role  Role    @default(CLIENT)

  employee  Employee?
  customer  Customer?
}

model Product {
  id         String         @id @default(cuid())
  name       String
  price      Int
  brand      ProductBrand
  stock      Int            @default(0)
  status     ProductStatus  @default(NO_STOCK)
  thumbUrl   String?

  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  orderItems OrderItem[]
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  avatarUrl String?
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orders    Order[]
}

model Order {
  id         String      @id @default(cuid())
  totalValue Int
  status     OrderStatus @default(PROCESSING)
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId String

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  items      OrderItem[]
}

model OrderItem {
  id         String    @id @default(cuid())
  quantity   Int
  itemName   String
  itemPrice  Int
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product?  @relation(fields: [productId], references: [id])
  productId  String?

  @@unique([orderId, productId])
}

model Employee {
  id        String          @id @default(cuid())
  name      String      
  email     String          @unique
  cpf       String          @unique
  status    EmployeeStatus  @default(ACTIVE)
  avatarUrl String?
  user      User            @relation(fields: [userId], references: [id])
  userId    String          @unique

  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  tasks     TaskAssignment[]
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      TaskStatus  @default(TODO)
  dueDate     DateTime?

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  assignees   TaskAssignment[]
}

model TaskAssignment {
  id          String    @id @default(cuid())
  task        Task      @relation(fields: [taskId], references: [id])
  taskId      String
  employee    Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  employeeId  String?   

  @@unique([taskId, employeeId])
}
